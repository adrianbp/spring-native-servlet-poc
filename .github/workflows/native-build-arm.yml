name: CI/CD Native Build ARM64

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: adrianbp/spring-native-servlet-poc-native-arm
  ENVIRONMENT_URL: ${{ secrets.DYNATRACE_ENVIRONMENT_URL }}
  API_TOKEN: ${{ secrets.DYNATRACE_API_TOKEN }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test

  build-native-arm:
    name: Build Native ARM64 Image
    runs-on: [self-hosted, linux, arm64, graviton]
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build native ARM64 binary
      run: mvn clean -Pnative native:compile
      
    - name: Upload native binary
      uses: actions/upload-artifact@v4
      with:
        name: native-binary-arm
        path: target/native-jpa-servlet
        retention-days: 5

  build-docker-native-arm:
    name: Build and Push Native ARM64 Docker Image
    runs-on: [self-hosted, linux, arm64, graviton]
    needs: build-native-arm
    permissions:
      contents: read
      packages: write
      
    steps:
    - uses: actions/checkout@v4
    
    - name: Download native binary
      uses: actions/download-artifact@v4
      with:
        name: native-binary-arm
        path: target/
        
    - name: Make binary executable
      run: chmod +x target/native-jpa-servlet
      
    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
      
    - name: Generate Docker tags
      id: docker_tags
      run: |
        # Define tags
        DOCKER_TAGS=""
        
        # Add branch-based tag
        if [[ "${{ github.ref }}" == refs/heads/* ]]; then
          BRANCH=${GITHUB_REF#refs/heads/}
          DOCKER_TAGS="ghcr.io/${{ env.IMAGE_NAME }}:${BRANCH}"
        fi
        
        # Add PR-based tag
        if [[ "${{ github.ref }}" == refs/pull/* ]]; then
          PR=${GITHUB_REF#refs/pull/}
          PR=${PR%/merge}
          DOCKER_TAGS="${DOCKER_TAGS} ghcr.io/${{ env.IMAGE_NAME }}:pr-${PR}"
        fi
        
        # Add SHA tag
        SHA_SHORT=$(echo "${{ github.sha }}" | cut -c1-7)
        if [[ -n "${BRANCH}" ]]; then
          DOCKER_TAGS="${DOCKER_TAGS} ghcr.io/${{ env.IMAGE_NAME }}:${BRANCH}-${SHA_SHORT}"
        fi
        
        # Add latest tag if default branch
        if [[ "${{ github.ref }}" == "refs/heads/main" || "${{ github.ref }}" == "refs/heads/master" ]]; then
          DOCKER_TAGS="${DOCKER_TAGS} ghcr.io/${{ env.IMAGE_NAME }}:latest"
        fi
        
        echo "Generated tags: ${DOCKER_TAGS}"
        echo "tags=${DOCKER_TAGS}" >> $GITHUB_OUTPUT
      
    - name: Build and push Docker image
      run: |
        echo "Building Docker image..."
        docker build -f Dockerfile.native -t ghcr.io/${{ env.IMAGE_NAME }}:latest .
        
        echo "Pushing Docker images with tags..."
        for tag in ${{ steps.docker_tags.outputs.tags }}; do
          echo "Tagging and pushing: $tag"
          docker tag ghcr.io/${{ env.IMAGE_NAME }}:latest $tag
          docker push $tag
        done
        
        echo "Pushing latest tag..."
        docker push ghcr.io/${{ env.IMAGE_NAME }}:latest

  deploy-native-arm:
    name: Deploy Native ARM64 to Kubernetes
    runs-on: ubuntu-latest
    needs: build-docker-native-arm
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Update kubeconfig
      run: aws eks update-kubeconfig --region us-west-2 --name spring-native-poc-cluster
      
    - name: Deploy ARM64 Native to EKS
      run: |
        kubectl apply -f k8s/native-arm/ --validate=false
        kubectl rollout restart deployment/spring-native-app-arm -n spring-native-arm
        kubectl rollout status deployment/spring-native-app-arm -n spring-native-arm --timeout=300s
